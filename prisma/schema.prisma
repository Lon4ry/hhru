// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.local"
}

enum Role {
  APPLICANT
  EMPLOYER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  phone     String?
  role      Role     @default(APPLICANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume       Resume?
  company      Company?
  vacancies    Vacancy[]     @relation("EmployerVacancies")
  applications Application[]

  @@map("users")
}

model Resume {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @unique
  position   String
  about      String?
  education  Education[]
  experience Experience[]
  createdAt  DateTime     @default(now())

  applications Application[]
}

model Education {
  id          Int     @id @default(autoincrement())
  resume      Resume  @relation(fields: [resumeId], references: [id])
  resumeId    Int
  institution String
  specialty   String
  degree      String?
  startYear   Int?
  endYear     Int?
}

model Experience {
  id          Int       @id @default(autoincrement())
  resume      Resume    @relation(fields: [resumeId], references: [id])
  resumeId    Int
  company     String
  position    String
  description String?
  startDate   DateTime?
  endDate     DateTime?
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String
  inn       String? // для РФ — налоговый идентификатор
  email     String?
  phone     String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  vacancies Vacancy[]

  @@map("companies")
}

model Vacancy {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  salary      Int?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  employer   User @relation("EmployerVacancies", fields: [employerId], references: [id])
  employerId Int

  applications Application[]
  Company      Company?      @relation(fields: [companyId], references: [id])
  companyId    Int?
}

model Application {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String   @default("pending")

  applicant   User @relation(fields: [applicantId], references: [id])
  applicantId Int

  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
  vacancyId Int

  resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId Int?
}

model SystemLog {
  id        Int      @id @default(autoincrement())
  action    String
  userEmail String?
  createdAt DateTime @default(now())
}
