// Prisma schema for StaffTechnology platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.local"
}

enum Role {
  APPLICANT
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  pending
  invited
  rejected
  hired
}

enum EmploymentType {
  full_time
  part_time
  project
  internship
  temporary
}

enum ScheduleType {
  remote
  hybrid
  office
  shift
  flexible
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  patronymic String?
  phone      String?
  role       Role     @default(APPLICANT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resume        Resume?
  company       Company?
  vacancies     Vacancy[]      @relation("EmployerVacancies")
  applications  Application[]  @relation("ApplicantApplications")
  notifications Notification[]
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  inn         String
  email       String
  phone       String?
  description String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  vacancies   Vacancy[]
}

model Resume {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @unique
  desiredPosition String
  summary         String?
  city            String?
  expectedSalary  Int?
  employmentType  EmploymentType?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  education    Education[]
  experience   Experience[]
  applications Application[]
  skills       Skill[]
}

model Skill {
  id       Int    @id @default(autoincrement())
  skill    String
  resumeId Int
  resume   Resume @relation(fields: [resumeId], references: [id])
}

model Education {
  id          Int     @id @default(autoincrement())
  resume      Resume  @relation(fields: [resumeId], references: [id])
  resumeId    Int
  institution String
  degree      String?
  field       String?
  startYear   Int?
  endYear     Int?
}

model Experience {
  id          Int       @id @default(autoincrement())
  resume      Resume    @relation(fields: [resumeId], references: [id])
  resumeId    Int
  company     String
  position    String
  description String?
  startDate   DateTime?
  endDate     DateTime?
}

model Vacancy {
  id             Int             @id @default(autoincrement())
  title          String
  specialization String?
  description    String
  requirements   String
  conditions     String
  city           String
  employmentType EmploymentType?
  schedule       ScheduleType?
  salaryFrom     Int?
  salaryTo       Int?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  employer   User     @relation("EmployerVacancies", fields: [employerId], references: [id])
  employerId Int
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  Int?

  applications Application[]
}

model Application {
  id        Int               @id @default(autoincrement())
  status    ApplicationStatus @default(pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  applicant   User @relation("ApplicantApplications", fields: [applicantId], references: [id])
  applicantId Int

  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
  vacancyId Int

  resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SystemLog {
  id        Int      @id @default(autoincrement())
  action    String
  userEmail String?
  createdAt DateTime @default(now())
}
